{"version":3,"file":"static/js/662.3f9371ad.chunk.js","mappings":"sSAOMA,E,MAAWC,GAAAA,OAAa,CAC1BC,QAAQ,GAAD,OALM,gCAMbC,OAAQ,CACJC,QAAS,sCAGJC,EAAQ,mCAAG,2GAAOC,EAAP,+BAAY,EAAZ,SACCN,EAASO,IAAI,oBAAqB,CACnDJ,OAAQ,CACJG,KAAAA,KAHY,uBACbE,EADa,EACbA,KADa,kBAMbA,GANa,2CAAH,qDASRC,EAAY,mCAAG,WAAOC,GAAP,yFACHV,EAASO,IAAT,iBAAuBG,IADpB,uBACjBF,EADiB,EACjBA,KADiB,kBAEjBA,GAFiB,2CAAH,sDAKZG,EAAW,mCAAG,WAAOC,GAAP,8FAAcN,EAAd,+BAAmB,EAAnB,SACFN,EAASO,IAAI,gBAAiB,CAC/CJ,OAAQ,CACJS,MAAAA,EACAN,KAAAA,KAJe,uBAChBE,EADgB,EAChBA,KADgB,kBAOhBA,GAPgB,2CAAH,sDAUXK,EAAY,mCAAG,WAAOH,GAAP,yFACHV,EAASO,IAAT,iBAAuBG,EAAvB,aADG,uBACjBF,EADiB,EACjBA,KADiB,kBAEjBA,GAFiB,2CAAH,sDAKZM,EAAc,mCAAG,WAAOJ,GAAP,yFACLV,EAASO,IAAT,iBAAuBG,EAAvB,aADK,uBACnBF,EADmB,EACnBA,KADmB,kBAEnBA,GAFmB,2CAAH,qD,+ICzC3B,GAAgB,IAAM,kBAAkB,KAAO,mBAAmB,iBAAmB,+BAA+B,SAAW,wB,SCKhH,SAASO,IAEtB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEKC,GAAWC,EAAAA,EAAAA,MAAXD,SAGLE,EAAAA,EAAAA,YAAW,WACT,IAAMC,EAAU,mCAAG,oGAEfN,GAAW,GACXE,EAAS,MAHM,UAIMT,EAAAA,EAAAA,IAAaU,GAJnB,OAITI,EAJS,OAKfT,EAAQS,EAAOV,MALA,gDAQfK,EAAS,EAAD,IARO,yBAWfF,GAAW,GAXI,4EAAH,qDAehBM,GACD,GAAC,CAACH,IACH,IAAMK,EAASC,QAAQZ,EAAKa,QAC5B,OACE,gCACCX,IAAW,SAAC,IAAD,IACXE,IAAS,uEACRO,IAAU,iFACZ,eAAIG,UAAWC,EAAAA,KAAf,gBACCf,QADD,IACCA,OADD,EACCA,EAAMgB,KAAI,gBAAGvB,EAAH,EAAGA,GAAIwB,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,UAAWC,EAAhC,EAAgCA,KAAhC,OACV,gBAAIL,UAAWC,EAAAA,SAAf,WACU,gBACCD,UAAWC,EAAAA,IACZK,IAAsB,OAAjBH,EAAwB,kLAAxB,yCAA8OA,GAAgBI,IAAKF,EAAMjB,QAAQ,UACtR,iBAAKY,UAAWC,EAAAA,iBAAhB,WACI,cAAGD,UAAWC,EAAAA,UAAd,UAA8B,uBAAII,OAClC,uCAAeD,UANMzB,EADzB,QAcd,C","sources":["components/API/fetch.jsx","webpack://goit-react-hw-05-movies/./src/components/pages/Cast/Cast.module.scss?4b73","components/pages/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\n// const MOVIE_ID_URL = `${BASE_URL}/movie/`;\n\nconst instance = axios.create({\n    baseURL: `${BASE_URL}`,\n    params: {\n        api_key: \"04cb754e3fc264242ddc48b1c691d765\"\n    }\n})\nexport const getMovie = async (page=1) => {\n    const {data} = await instance.get(\"/trending/all/day\", {\n        params: {\n            page,\n        }\n    });\n    return data\n};\n\nexport const getMovieById = async (id) => {\n    const {data} = await instance.get(`/movie/${id}`);\n    return data\n};\n\nexport const searchMovie = async (query, page=1) => {\n    const {data} = await instance.get(\"/search/movie\", {\n        params: {\n            query,\n            page,\n        }\n    });\n    return data\n};\n\nexport const getCastsById = async (id) => {\n    const {data} = await instance.get(`/movie/${id}/credits`);\n    return data\n};\n\nexport const getReviewsById = async (id) => {\n    const {data} = await instance.get(`/movie/${id}/reviews`);\n    return data\n};\n\n\n// const KEY = '04cb754e3fc264242ddc48b1c691d765';\n// const BASE_URL = 'https://api.themoviedb.org/3/movie/550';\n// // const LIMIT = 12;\n\n// export const fetch = async (query, page) => {\n//     try {\n//         const response = await axios.get\n//         (`${BASE_URL}?&api_key=${KEY}`);\n// return response.data\n//     }\n//     catch (error) {\n//         console.log(error)\n//     }\n// }","// extracted by mini-css-extract-plugin\nexport default {\"img\":\"Cast_img__iia0U\",\"list\":\"Cast_list__ZCYim\",\"actorDescription\":\"Cast_actorDescription__q-9QI\",\"listItem\":\"Cast_listItem__mH66H\"};","import { useParams } from \"react-router-dom\"\nimport  { useState, useEffect } from 'react'\nimport { getCastsById } from \"components/API/fetch\";\nimport Loader from 'components/Loader/loader';\nimport scss from \"./Cast.module.scss\"\n\nexport default function Cast() {\n\n  const [cast, setCast] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\nconst {movieId} = useParams()\n \n\n  useEffect (() => {\n    const fetchCasts = async () => {\n      try {\n        setLoading(true)\n        setError(null)\n        const result = await getCastsById(movieId)\n        setCast(result.cast)\n        \n      } catch (error) {\n        setError(error)\n      }\n      finally {\n        setLoading(false)\n        \n      }\n    }\n    fetchCasts()\n  },[movieId])\n  const isCast = Boolean(cast.length);\n  return (\n    <>\n    {loading && <Loader />}\n    {error && <p>Помилка</p>}\n    {!isCast && <p>We don't have any actors information for this moment</p>}\n    <ul className={scss.list}>\n    {cast?.map(({ id, profile_path, character, name }) =>\n     <li className={scss.listItem} key={id}>\n               <img \n                className={scss.img}\n               src={profile_path === null ? 'https://us.123rf.com/450wm/urfandadashov/urfandadashov1805/urfandadashov180500070/100957966-photo-not-available-icon-isolated-on-white-background-vector-illustration.jpg?ver=6' : `https://image.tmdb.org/t/p/w200${profile_path}`} alt={name} loading=\"lazy\" />\n               <div className={scss.actorDescription}>\n                   <p className={scss.actorName}><b>{name}</b></p>\n                   <p>Character: {character}</p>\n               </div>\n           </li>\n           )}\n </ul>\n    </>\n  )\n}"],"names":["instance","axios","baseURL","params","api_key","getMovie","page","get","data","getMovieById","id","searchMovie","query","getCastsById","getReviewsById","Cast","useState","cast","setCast","loading","setLoading","error","setError","movieId","useParams","useEffect","fetchCasts","result","isCast","Boolean","length","className","scss","map","profile_path","character","name","src","alt"],"sourceRoot":""}